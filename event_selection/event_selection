#!/usr/bin/env python

INFORMATION = """
Event selection for p p > wp zp, (wp > t b, (t > w b, (w > j j))), zp > n1 n1

<How to use>
Prerequisite: ROOT and Delphes libraries must be in PYTHONPATH

Input: Two files -- tag_#_delphes_events.root and run_#_tag_#_banner.txt
Output: One file (.root) containing histograms and cut&event information
        (will open and edit)

In terminal, type:
python event_selection [channel] [run-start] [run-end] [tag] [btag] [non_b] [mw_low] [mw_up] [mt_low] [mt_up] [met] ([output])


[channel]: enter whether signal, background, specify channel, etc.
[run-start] [run-end]: enter run # (e.g. 1 20  if run 01-20)
[tag]: enter tag # (e.g. 1 if tag_1)
[btag] ... [met]: cut values (if not specified, sample values will be given)
[output]: enter output file name (e.g. "myresults.root")
          IF not specified, "data_{cutID}.root"
   
"""
############## Modules ####################
from sys import argv, exit
import ROOT
from reconstruct import *
from time import clock

ROOT.gSystem.Load("libDelphes")

try:
  ROOT.gInterpreter.Declare(
    '#include "classes/DelphesClasses.h"')
  ROOT.gInterpreter.Declare(
    '#include "external/ExRootAnalysis/ExRootTreeReader.h"')
except:
  pass

######### Set Default Parameters ##########
# declare masses of top quark and W boson
global MT, MW
MT, MW = 1.730000e+02, 7.982436e+01

# Particles of interest. Enter PID:
PID = [9916663, 9906663, 9926662]   # wp, zp, n1

############# Set Cut #####################
### reconstruct.wpCut object ###
# Purpose of this object is to store cut info

# Default values
val = [2,2,30,30,20,20,50] #btag, non_b, mw_low, mw_up, mt_low, mt_up, met

# Given values
if len(argv) > 5:
  for i in range(5, len(argv)):
    if i > 11:
      break
    val[i-5] = int(argv[i])

CUT = wpCut()
CUT.setBTag(val[0])
CUT.setNonBJet(val[1]) # 2 non-b-tagged jets
CUT.setMWBosonLower(val[2])
CUT.setMWBosonUpper(val[3])
CUT.setMTopQuarkLower(val[4])
CUT.setMTopQuarkUpper(val[5])
CUT.setMETLower(val[6])
CUT.updateID()

#############################################################################
#############################################################################

### ---------------------- MAIN ------------------------- ###

def main(*argv):

  start_time = clock()

  ############## Read Input *argv ################
  # Input arguments
  if len(argv) < 5:
    print INFORMATION
    exit(1)
  elif len(argv) < 13:
    channel, run_start, run_end, tag =\
    argv[1], argv[2], argv[3], argv[4]
    output = "data_{}.root".format(CUT.cutID)
  else:
    channel, run_start, run_end, tag, output =\
    argv[1], argv[2], argv[3], argv[4], argv[12]

  ############## Display Cut Info ################
  print "----------Starting process-----------\nCut information:"
  CUT.displayCutInfo()

  ############## Create Output File ##############
  outputFile = ROOT.TFile(output, "UPDATE")

  ### Read files and store result in outputFile
  this_dir = CUT.cutID+"/"+channel
  try:
    outputFile.mkdir(this_dir)
  except:
    pass

  # Iterate over the range of run_start:run_end
  # Open and read delphes_events.root files
  if channel.startswith("signal"):
    event_type = "signal"
  elif channel.startswith("background"):
    event_type = channel

  for i in range(int(run_start), int(run_end)+1):
    print "\nNow starting run_{:02d}...".format(i)

    directory = "data/"+event_type+"/Events/run_{:02d}/".format(i)
    inputfile = "tag_{}_delphes_events.root".format(tag)
    banner = "run_{:02d}_tag_{}_banner.txt".format(i, tag)
    delphes_file = directory + inputfile
    banner_file = directory + banner
    print "  Variables set. Accessing files..."

    # Obtain histograms
    mwHist, mtHist, mwpHist, METHist =\
    event_selection (delphes_file, CUT, event_type, MT, MW)
    print "  Event selection: done"

    # Obtain event information
    event_info =\
    event_information (banner_file, CUT, *PID)
    print "  Event information: done"

    # Store the histograms into outputFile
    # directory: .root/cutID/channel/run_{}
    print "  Writing to file..."
    outputFile.mkdir(this_dir+"/run_"+str(i))
    ROOT.gDirectory.cd("/"+this_dir+"/run_"+str(i))
    mwHist.Write()
    mtHist.Write()
    mwpHist.Write()
    METHist.Write()

    # Store event information into TNtuple objects
    var_list = ":".join(event_info.keys())
    ntuple = ROOT.TNtuple("ntuple", "event info", var_list)
    ntuple.Fill(*event_info.values())
    ntuple.Write()
    
    print "  Congrats! run_{:02d} is now completed".format(i)
    if i+1 < int(run_end):
      print "  Moving on to run_{:02d} ...".format(i+1)

  end_time = clock()

  ### Run time
  print "Total run time: {:.3f} seconds".format(end_time - start_time)
  print "-------- All process finished --------\n"

if __name__ == "__main__":
  main(*argv)

#############################################################################
#############################################################################

# Close program?
#user_input = None
#while user_input != "n":
#  user_input = raw_input ("To continue, press \"n\" key followed by <Enter>: ")
