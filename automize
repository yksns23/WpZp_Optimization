#! /bin/bash

# Automize everything!
# 1. Set cut info: pass arguments into command line
# 2. Event selection -> access data in MG5 -> output: .root file
# 3. .root file copied & moved to datafiles
# 4. .root file in datafiles opened and histograms normalized
# 5. Create .xml config files
# 6. hist2workspace .xml files
# 7. Resulting workspace file (.root) opened and statistical analysis performed

# Save this directory, since it'll return to it later
thisdir=$(pwd)

####### Step 1 #######
echo "-----Step 1-----"  # This makes it easier to fix errors
# User input
echo "Type run_start run_end for your signal"
read v1 v2
echo "Type cut information: BTag nonBJet MWLow MWHigh MTLow MTHigh MET"
echo "Tip: put at least 2 digits for MET (e.g. 'MET > 5GeV' is 05)"
read v3 v4 v5 v6 v7 v8 v9

cutid=$v3$v4$v5$v6$v7$v8$v9

####### Step 2 #######
echo "-----Step 2-----"
# Run event selection
data_directory="/home/yksns23/MG5_aMC_v2_6_3_2/RESEARCH"
cp event_selection/event_selection -t $data_directory
cp event_selection/reconstruct.py -t ~/MyPythonModules
cd $data_directory
python event_selection signal $v1 $v2 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
python event_selection background_jjbb 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
python event_selection background_jjbblvl 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
python event_selection background_jjbbvlvl 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
python event_selection background_pp_tb_combinations 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
python event_selection background_pp_tbZ_combinations 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
python event_selection background_pp_tt_combinations 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
python event_selection background_pp_ttZ_combinations 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
python event_selection background_pp_ttW_combinations 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
# These last two events have zero yield.
python event_selection background_multijet 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9
python event_selection background_multijet_multilepton 1 1 1 $v3 $v4 $v5 $v6 $v7 $v8 $v9

####### Step 3 #######
echo "-----Step 3-----"'
# Save the .root file both to MG5/selection_results and datafiles'

datafile="data_$cutid.root"

find . -maxdepth 1 -type f -name $datafile -exec cp -t selection_results {} \; -exec mv -t $thisdir/create_workspace/datafiles {} \;

cd $thisdir

####### Step 4 #######
echo "-----Step 4-----"
# Open the .root file in datafiles and normalize histograms
# (it will also normalize the background)
./normhist create_workspace/datafiles/$datafile $cutid $v1 $v2 40000 100000 # Last two numbers: signal nevents, background nevents

####### Step 5 #######
echo "-----Step 5-----"

source create_channel_xsec_scan
for (( run=((v1)); run<=((v2)); run++ )); do
  create_channel_xsec_scan $run $datafile $cutid
done

source create_top_config_xsec_scan
create_top_config_xsec_scan $cutid

# Use this step instead when calculating significance using Madgraph generated signal xsec
:'
# Create channels
source create_default_channel
for (( run=((v1)); run<=((v2)); run++ )); do
  create_default_channel $run $datafile $cutid
done

# Create top-level config
source create_default_top_config
create_default_top_config $cutid
'
####### Step 6 #######
echo "-----Step 6-----"
# Run hist2workspace

for file in create_workspace/config/${cutid}_xsec_scan/wpzp_config*; do
hist2workspace $file
done

####### Step 7 #######
echo "-----Step 7-----"
# Open workspace files and perform statistical analysis
declare -a masses=(300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900)
declare -a cross_sections=(0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00 2.25 2.50 2.75 3.00 3.25 3.50 3.75 4.00 4.25 4.50 4.75 5.00) # Units of 10^(-3) pb
for (( run=((v1)); run<=((v2)); run++ )); do   # Scan over masses
  mwp=${masses[(($run-1))]}
  for (( iter=0; iter<20; iter++ )); do   # Scan over cross sections
    xsec=${cross_sections[iter]} 
    infile="create_workspace/results/data_cut${cutid}_xsec_scan/wpzp_run${run}_mwp${mwp}_xsec${xsec}_mwp_model.root"
    outfile="sigma_results/signif_cut${cutid}_xsec_scan.root"
    ./sigma $infile $mwp $xsec "run${run}_mwp${mwp}_xsec${xsec}" $outfile
  done
done



